// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: article/v1/article_service.proto

package articlev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ArticleService_HealthzCheck_FullMethodName           = "/article.v1.ArticleService/HealthzCheck"
	ArticleService_GetPosts_FullMethodName               = "/article.v1.ArticleService/GetPosts"
	ArticleService_GetPostByID_FullMethodName            = "/article.v1.ArticleService/GetPostByID"
	ArticleService_InternalGetPosts_FullMethodName       = "/article.v1.ArticleService/InternalGetPosts"
	ArticleService_InternalCreatePost_FullMethodName     = "/article.v1.ArticleService/InternalCreatePost"
	ArticleService_InternalGetPostByID_FullMethodName    = "/article.v1.ArticleService/InternalGetPostByID"
	ArticleService_InternalUpdatePost_FullMethodName     = "/article.v1.ArticleService/InternalUpdatePost"
	ArticleService_InternalDeletePostByID_FullMethodName = "/article.v1.ArticleService/InternalDeletePostByID"
)

// ArticleServiceClient is the client API for ArticleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArticleServiceClient interface {
	HealthzCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// Post proto service
	GetPosts(ctx context.Context, in *GetPostsRequest, opts ...grpc.CallOption) (*GetPostsResponse, error)
	GetPostByID(ctx context.Context, in *ParamID, opts ...grpc.CallOption) (*GetPostByIDResponse, error)
	// Internal Post proto service
	InternalGetPosts(ctx context.Context, in *InternalGetPostsRequest, opts ...grpc.CallOption) (*InternalGetPostsResponse, error)
	InternalCreatePost(ctx context.Context, in *InternalCreatePostRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	InternalGetPostByID(ctx context.Context, in *ParamID, opts ...grpc.CallOption) (*InternalGetPostByIDResponse, error)
	InternalUpdatePost(ctx context.Context, in *InternalUpdatePostRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	InternalDeletePostByID(ctx context.Context, in *ParamID, opts ...grpc.CallOption) (*CommonResponse, error)
}

type articleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArticleServiceClient(cc grpc.ClientConnInterface) ArticleServiceClient {
	return &articleServiceClient{cc}
}

func (c *articleServiceClient) HealthzCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, ArticleService_HealthzCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) GetPosts(ctx context.Context, in *GetPostsRequest, opts ...grpc.CallOption) (*GetPostsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPostsResponse)
	err := c.cc.Invoke(ctx, ArticleService_GetPosts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) GetPostByID(ctx context.Context, in *ParamID, opts ...grpc.CallOption) (*GetPostByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPostByIDResponse)
	err := c.cc.Invoke(ctx, ArticleService_GetPostByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) InternalGetPosts(ctx context.Context, in *InternalGetPostsRequest, opts ...grpc.CallOption) (*InternalGetPostsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InternalGetPostsResponse)
	err := c.cc.Invoke(ctx, ArticleService_InternalGetPosts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) InternalCreatePost(ctx context.Context, in *InternalCreatePostRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, ArticleService_InternalCreatePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) InternalGetPostByID(ctx context.Context, in *ParamID, opts ...grpc.CallOption) (*InternalGetPostByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InternalGetPostByIDResponse)
	err := c.cc.Invoke(ctx, ArticleService_InternalGetPostByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) InternalUpdatePost(ctx context.Context, in *InternalUpdatePostRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, ArticleService_InternalUpdatePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) InternalDeletePostByID(ctx context.Context, in *ParamID, opts ...grpc.CallOption) (*CommonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, ArticleService_InternalDeletePostByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticleServiceServer is the server API for ArticleService service.
// All implementations must embed UnimplementedArticleServiceServer
// for forward compatibility.
type ArticleServiceServer interface {
	HealthzCheck(context.Context, *emptypb.Empty) (*HealthCheckResponse, error)
	// Post proto service
	GetPosts(context.Context, *GetPostsRequest) (*GetPostsResponse, error)
	GetPostByID(context.Context, *ParamID) (*GetPostByIDResponse, error)
	// Internal Post proto service
	InternalGetPosts(context.Context, *InternalGetPostsRequest) (*InternalGetPostsResponse, error)
	InternalCreatePost(context.Context, *InternalCreatePostRequest) (*CommonResponse, error)
	InternalGetPostByID(context.Context, *ParamID) (*InternalGetPostByIDResponse, error)
	InternalUpdatePost(context.Context, *InternalUpdatePostRequest) (*CommonResponse, error)
	InternalDeletePostByID(context.Context, *ParamID) (*CommonResponse, error)
	mustEmbedUnimplementedArticleServiceServer()
}

// UnimplementedArticleServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedArticleServiceServer struct{}

func (UnimplementedArticleServiceServer) HealthzCheck(context.Context, *emptypb.Empty) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthzCheck not implemented")
}
func (UnimplementedArticleServiceServer) GetPosts(context.Context, *GetPostsRequest) (*GetPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPosts not implemented")
}
func (UnimplementedArticleServiceServer) GetPostByID(context.Context, *ParamID) (*GetPostByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostByID not implemented")
}
func (UnimplementedArticleServiceServer) InternalGetPosts(context.Context, *InternalGetPostsRequest) (*InternalGetPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InternalGetPosts not implemented")
}
func (UnimplementedArticleServiceServer) InternalCreatePost(context.Context, *InternalCreatePostRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InternalCreatePost not implemented")
}
func (UnimplementedArticleServiceServer) InternalGetPostByID(context.Context, *ParamID) (*InternalGetPostByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InternalGetPostByID not implemented")
}
func (UnimplementedArticleServiceServer) InternalUpdatePost(context.Context, *InternalUpdatePostRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InternalUpdatePost not implemented")
}
func (UnimplementedArticleServiceServer) InternalDeletePostByID(context.Context, *ParamID) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InternalDeletePostByID not implemented")
}
func (UnimplementedArticleServiceServer) mustEmbedUnimplementedArticleServiceServer() {}
func (UnimplementedArticleServiceServer) testEmbeddedByValue()                        {}

// UnsafeArticleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArticleServiceServer will
// result in compilation errors.
type UnsafeArticleServiceServer interface {
	mustEmbedUnimplementedArticleServiceServer()
}

func RegisterArticleServiceServer(s grpc.ServiceRegistrar, srv ArticleServiceServer) {
	// If the following call pancis, it indicates UnimplementedArticleServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ArticleService_ServiceDesc, srv)
}

func _ArticleService_HealthzCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).HealthzCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleService_HealthzCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).HealthzCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_GetPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).GetPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleService_GetPosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).GetPosts(ctx, req.(*GetPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_GetPostByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParamID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).GetPostByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleService_GetPostByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).GetPostByID(ctx, req.(*ParamID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_InternalGetPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalGetPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).InternalGetPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleService_InternalGetPosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).InternalGetPosts(ctx, req.(*InternalGetPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_InternalCreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalCreatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).InternalCreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleService_InternalCreatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).InternalCreatePost(ctx, req.(*InternalCreatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_InternalGetPostByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParamID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).InternalGetPostByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleService_InternalGetPostByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).InternalGetPostByID(ctx, req.(*ParamID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_InternalUpdatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalUpdatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).InternalUpdatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleService_InternalUpdatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).InternalUpdatePost(ctx, req.(*InternalUpdatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_InternalDeletePostByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParamID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).InternalDeletePostByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleService_InternalDeletePostByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).InternalDeletePostByID(ctx, req.(*ParamID))
	}
	return interceptor(ctx, in, info, handler)
}

// ArticleService_ServiceDesc is the grpc.ServiceDesc for ArticleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArticleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "article.v1.ArticleService",
	HandlerType: (*ArticleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthzCheck",
			Handler:    _ArticleService_HealthzCheck_Handler,
		},
		{
			MethodName: "GetPosts",
			Handler:    _ArticleService_GetPosts_Handler,
		},
		{
			MethodName: "GetPostByID",
			Handler:    _ArticleService_GetPostByID_Handler,
		},
		{
			MethodName: "InternalGetPosts",
			Handler:    _ArticleService_InternalGetPosts_Handler,
		},
		{
			MethodName: "InternalCreatePost",
			Handler:    _ArticleService_InternalCreatePost_Handler,
		},
		{
			MethodName: "InternalGetPostByID",
			Handler:    _ArticleService_InternalGetPostByID_Handler,
		},
		{
			MethodName: "InternalUpdatePost",
			Handler:    _ArticleService_InternalUpdatePost_Handler,
		},
		{
			MethodName: "InternalDeletePostByID",
			Handler:    _ArticleService_InternalDeletePostByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "article/v1/article_service.proto",
}
